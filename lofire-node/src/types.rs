//! LoFiRe node data types
//!
//! Corresponds to the BARE schema

use lofire::types::*;
use lofire_repo::types::*;
use serde::{Deserialize, Serialize};

//
// COMMON DATA TYPES FOR MESSAGES
//

/// Peer ID: public key of node
pub type PeerId = PubKey;

/// IPv4 address
pub type IPv4 = [u8; 4];

/// IPv6 address
pub type IPv6 = [u8; 16];

/// IP address
#[derive(Clone, Copy, Debug, Serialize, Deserialize)]
pub enum IP {
    IPv4(IPv4),
    IPv6(IPv6),
}

/// IP transport protocol
#[derive(Clone, Copy, Debug, Serialize, Deserialize)]
pub enum IPTransportProtocol {
    TLS,
    QUIC,
}

/// IP transport address
#[derive(Clone, Copy, Debug, Serialize, Deserialize)]
pub struct IPTransportAddr {
    pub ip: IP,
    pub port: u16,
    pub protocol: IPTransportProtocol,
}

/// Network address
#[derive(Clone, Copy, Debug, Serialize, Deserialize)]
pub enum NetAddr {
    IPTransport(IPTransportAddr),
}

/// Bloom filter (variable size)
pub struct BloomFilter {
    /// Number of hash functions
    pub k: u8,

    /// Filter
    pub f: Vec<u8>,
}

/// Bloom filter (128 B)
///
/// (m=1024; k=7; p=0.01; n=107)
pub type BloomFilter128 = [[u8; 32]; 4];

/// Bloom filter (1 KiB)
///
/// (m=8192; k=7; p=0.01; n=855)
pub type BloomFilter1K = [[u8; 32]; 32];

//
// OVERLAY MESSAGES
//

/// Overlay connection request
///
/// Sent to an existing overlay member to initiate a session
pub enum OverlayConnect {
    V0(),
}

/// Overlay disconnection request
///
/// Sent to a connected overlay member to terminate a session
pub enum OverlayDisconnect {
    V0(),
}

/// Content of TopicAdvertV0
pub struct TopicAdvertContentV0 {
    /// Topic public key
    pub topic: PubKey,

    /// Peer public key
    pub peer: PeerId,
}

/// Topic advertisement by a publisher
///
/// Flooded to all peers in overlay
/// Creates subscription routing table entries
pub struct TopicAdvertV0 {
    pub content: TopicAdvertContentV0,

    /// Signature over content by topic key
    pub sig: Signature,
}

/// Topic advertisement by a publisher
pub enum TopicAdvert {
    V0(TopicAdvertV0),
}

/// Topic subscription request by a peer
///
/// Forwarded towards all publishers along subscription routing table entries
/// that are created by TopicAdverts
/// Creates event routing table entries along the path
pub struct SubReqV0 {
    /// Random ID generated by the subscriber
    pub id: u64,

    /// Topic public key
    pub topic: PubKey,
}

/// Topic subscription request by a peer
pub enum SubReq {
    V0(SubReqV0),
}

/// Topic unsubscription request by a subscriber
///
/// A broker unsubscribes from upstream brokers
/// when it has no more subscribers left
pub struct UnsubReqV0 {
    /// Topic public key
    pub topic: PubKey,
}

/// Topic unsubscription request by a subscriber
pub enum UnsubReq {
    V0(UnsubReqV0),
}

/// Topic unsubscription acknowledgement
/// Sent to the requestor in response to an UnsubReq
pub struct UnsubAckV0 {
    /// Topic public key
    pub topic: PubKey,
}
pub enum UnsubAck {
    V0(UnsubAckV0),
}

/// Branch change notification
/// Contains a chunk of a newly added Commit or File referenced by a commit.
pub struct ChangeV0 {
    /// Object with encrypted content
    pub content: Object,

    /// Encrypted key for the Commit object in content
    /// The key is encrypted using ChaCha20:
    /// - key: BLAKE3 derive_key ("LoFiRe Event ObjectRef ChaCha20 key",
    ///                           branch_pubkey + branch_secret + publisher_pubkey)
    /// - nonce: commit_seq
    pub key: Option<SymKey>,
}

/// Body of EventContentV0
pub enum EventBodyV0 {
    SubAck,
    Change,
}

/// Content of EventV0
pub struct EventContentV0 {
    /// Pub/sub topic
    pub topic: PubKey,

    /// Publisher pubkey hash
    /// BLAKE3 keyed hash over branch member pubkey
    /// - key: BLAKE3 derive_key ("LoFiRe Event publisher BLAKE3 key",
    ///                           repo_pubkey + repo_secret +
    ///                           branch_pubkey + branch_secret)
    pub publisher: Digest,

    /// Commit sequence number of publisher
    pub seq: u32,

    /// Event body
    pub body: EventBodyV0,
}

/// Pub/sub event published in a topic
///
/// Forwarded along event routing table entries
pub struct EventV0 {
    pub content: EventContentV0,

    /// Signature over content by topic key
    pub sig: Signature,
}

/// Pub/sub event published in a topic
pub enum Event {
    V0(EventV0),
}

/// Object request by ID
///
/// Sent along the reverse path of a pub/sub topic
/// from a subscriber to all publishers.
pub struct ObjectReqTopicV0 {
    /// Topic to forward the request in
    pub topic: PubKey,

    /// List of Object IDs to request
    pub ids: Vec<ObjectId>,

    /// Whether or not to include all children recursively in the response
    pub recursive: bool,

    /// List of Peer IDs the request traversed so far
    pub path: Vec<PeerId>,
}

/// Object request by ID
pub enum ObjectReqTopic {
    V0(ObjectReqTopicV0),
}

/// Object request by ID using a random walk
pub struct ObjectReqRandomV0 {
    /// List of Object IDs to request
    pub ids: Vec<ObjectId>,

    /// Whether or not to include all children recursively in the response
    pub recursive: bool,

    /// Number of random nodes to forward the request to at each step
    pub fanout: u8,

    /// List of Peer IDs the request traversed so far
    pub path: Vec<PeerId>,
}

/// Object request by ID using a random walk
pub enum ObjectReqRandom {
    V0(ObjectReqRandomV0),
}

/// Response to an Object request
///
/// Follows request path with possible shortcuts.
pub struct ObjectRespV0 {
    /// Response path
    pub path: Vec<PeerId>,

    /// Resulting Object(s)
    pub payload: Vec<Object>,
}

/// Response to an Object request
pub enum ObjectResp {
    V0(ObjectRespV0),
}

/// Request latest events corresponding to the branch heads in a pub/sub topic
///
/// In response an Event is sent for each commit chunk that belong to branch heads
/// that are not present in the requestor's known heads
pub struct BranchHeadsReqV0 {
    /// Topic public key of the branch
    pub topic: PubKey,

    /// Known heads
    pub known_heads: Vec<ObjectId>,
}

/// Request latest events corresponding to the branch heads in a pub/sub topic
pub enum BranchHeadsReq {
    V0(BranchHeadsReqV0),
}

/// Branch synchronization request
///
/// In response a stream of Objects are sent
/// that are not present in the requestor's known heads and commits
pub struct BranchSyncReqV0 {
    /// Heads to request, including all their deps
    pub heads: Vec<ObjectId>,

    /// Fully synchronized up until these commits
    pub known_heads: Vec<ObjectId>,

    /// Known commit IDs since knownHeads
    pub known_commits: BloomFilter,
}

/// Branch synchronization request
pub enum BranchSyncReq {
    V0(BranchSyncReqV0),
}

/// Events the requestor needs, see EventReqV0
pub struct NeedEventsV0 {
    /// Publisher ID
    pub publisher: Digest,

    /// First sequence number to request
    pub from: u32,

    /// Last sequence number to request
    pub to: u32,
}

/// Events the responder has, see EventRespV0
pub struct HaveEventsV0 {
    /// Publisher ID
    pub publisher: Digest,

    /// First sequence number to send
    pub from: u32,

    /// Last sequence number to send
    pub to: u32,
}

/// Request missed events for a pub/sub topic
///
/// for the specified range of publisher sequence numbers
/// In response an EventResp then a stream of Events are sent
pub struct EventReqV0 {
    /// Topic public key
    pub topic: PubKey,

    /// Events needed by the requestor
    pub need: Vec<NeedEventsV0>,
}

/// Request missed events for a pub/sub topic
pub enum EventReq {
    V0(EventReqV0),
}

/// Response to an EventReq
pub struct EventRespV0 {
    /// Events the responder has
    pub have: Vec<HaveEventsV0>,
}

/// Response to an EventReq
pub enum EventResp {
    V0(EventRespV0),
}

/// Content of OverlayRequestV0
pub enum OverlayRequestContentV0 {
    EventReq(EventReq),
    BranchHeadsReq(BranchHeadsReq),
    BranchSyncReq(BranchSyncReq),
}

/// Request sent to an overlay
pub struct OverlayRequestV0 {
    /// Request ID
    pub id: u64,

    /// Request content
    pub content: OverlayRequestContentV0,
}

/// Request sent to an overlay
pub enum OverlayRequest {
    V0(OverlayRequestV0),
}

pub enum OverlayResponseContentV0 {
    EventResp(EventResp),
    Object(Object),
}

/// Request sent to an overlay
pub struct OverlayResponseV0 {
    /// Request ID
    pub id: u64,

    /// Result
    pub result: u8,

    /// Response content
    pub content: Option<OverlayResponseContentV0>,
}

/// Request sent to an OverlayRequest
pub enum OverlayResponse {
    V0(OverlayResponseV0),
}

/// Content of PeerAdvertV0
pub struct PeerAdvertContentV0 {
    /// Peer ID
    pub peer: PeerId,

    /// Topic subscriptions
    pub subs: BloomFilter128,

    /// Network addresses
    pub address: Vec<NetAddr>,

    /// Version number
    pub version: u16,

    /// App-specific metadata (profile, cryptographic material, etc)
    pub metadata: Vec<u8>,
}

/// Peer advertisement
///
/// Sent periodically across the overlay along random walks.
pub struct PeerAdvertV0 {
    /// Peer advertisement content
    pub content: PeerAdvertContentV0,

    /// Signature over content by peer's private key
    pub sig: Signature,

    /// Time-to-live, decremented at each hop
    pub ttl: u8,
}

pub enum PeerAdvert {
    V0(PeerAdvertV0),
}

/// Overlay ID
///
/// - for public overlays that need to be discovered by public key:
///   BLAKE3 hash over the repository public key
/// - for private overlays:
///   BLAKE3 keyed hash over the repository public key
///   - key: BLAKE3 derive_key ("LoFiRe OverlayId BLAKE3 key", repo_secret)
type OverlayId = Digest;

/// Overlay session ID
///
/// Used as a component for key derivation.
/// Each peer generates it randomly when (re)joining the overlay network.
type SessionId = u64;

pub enum OverlayMessageContentType {
    OverlayConnect(OverlayConnect),
    OverlayDisconnect(OverlayDisconnect),
    PeerAdvert(PeerAdvert),
    TopicAdvert(TopicAdvert),
    SubReq(SubReq),
    UnsubReq(UnsubReq),
    UnsubAck(UnsubAck),
    Event(Event),
    ObjectReqTopic(ObjectReqTopic),
    ObjectReqRandom(ObjectReqRandom),
    OverlayRequest(OverlayRequest),
    OverlayResponse(OverlayResponse),
}

/// Content of OverlayMessageV0
pub struct OverlayMessageContentV0 {
    pub content: OverlayMessageContentType,

    /// Optional padding
    pub padding: Vec<u8>,
}

/// Overlay message
pub struct OverlayMessageV0 {
    /// Overlay ID
    pub overlay: OverlayId,

    /// Session ID
    pub session: SessionId,

    /// Content encrypted with ChaCha20
    /// - overlay_secret: BLAKE3 derive_key ("LoFiRe Overlay BLAKE3 key",
    ///                                      repo_pubkey + repo_secret)
    /// - key: BLAKE3 derive_key ("LoFiRe OverlayMessage ChaCha20 key",
    ///                           overlay_secret + session_id)
    /// - nonce: per-session message sequence number of sending peer
    pub content: OverlayMessageContentV0,

    /// BLAKE3 MAC
    /// BLAKE3 keyed hash over the encrypted content
    /// - key:  BLAKE3 derive_key ("LoFiRe OverlayMessage BLAKE3 key",
    ///                            overlay_secret + session_id)
    pub mac: Digest,
}

pub enum OverlayMessage {
    V0(OverlayMessageV0),
}

//
// BROKER MESSAGES
//

/// Server hello sent upon a client connection
pub struct ServerHelloV0 {
    /// Nonce for ClientAuth
    pub nonce: Vec<u8>,
}

pub enum ServerHello {
    V0(ServerHelloV0),
}

/// Content of ClientAuthV0
pub struct ClientAuthContentV0 {
    /// User pub key
    pub user: PubKey,

    /// Device pub key
    pub device: PubKey,

    /// Nonce from ServerHello
    pub nonce: Vec<u8>,
}

/// Client authentication
pub struct ClientAuthV0 {
    /// Authentication data
    pub content: ClientAuthContentV0,

    /// Signature by device key
    pub sig: Signature,
}

/// Client authentication
pub enum ClientAuth {
    V0(ClientAuthV0),
}

/// Content of AddUserV0
pub struct AddUserContentV0 {
    /// User pub key
    pub user: PubKey,
}

/// Add user account
pub struct AddUserV0 {
    pub content: AddUserContentV0,

    /// Signature by admin key
    pub sig: Signature,
}

/// Add user account
pub enum AddUser {
    V0(AddUserV0),
}
/// Content of DelUserV0
pub struct DelUserContentV0 {
    /// User pub key
    pub user: PubKey,
}

/// Delete user account
pub struct DelUserV0 {
    pub content: DelUserContentV0,

    /// Signature by admin key
    pub sig: Signature,
}

/// Delete user account
pub enum DelUser {
    V0(DelUserV0),
}
